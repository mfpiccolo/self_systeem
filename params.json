{"name":"Self systeem","tagline":"Record user interactions to build system tests.","body":"self_systeem\r\n============\r\n| Project                 |  Gem Release      |\r\n|------------------------ | ----------------- |\r\n| Gem name                |  self_systeem      |\r\n| License                 |  [MIT](LICENSE.txt)   |\r\n| Version                 |  [![Gem Version](https://badge.fury.io/rb/self_systeem.png)](http://badge.fury.io/rb/self_systeem) |\r\n| Continuous Integration  |  [![Build Status](https://travis-ci.org/mfpiccolo/self_systeem.png?branch=master)](https://travis-ci.org/mfpiccolo/self_systeem)\r\n| Test Coverage           |  [![Coverage Status](https://coveralls.io/repos/mfpiccolo/self_systeem/badge.png?branch=master)](https://coveralls.io/r/mfpiccolo/self_systeem?branch=coveralls)\r\n| Grade                   |  [![Code Climate](https://codeclimate.com/github/mfpiccolo/self_systeem.png)](https://codeclimate.com/github/mfpiccolo/self_systeem)\r\n| Dependencies            |  [![Dependency Status](https://gemnasium.com/mfpiccolo/self_systeem.png)](https://gemnasium.com/mfpiccolo/self_systeem)\r\n| Homepage                |  [http://mfpiccolo.github.io/self_systeem][homepage] |\r\n| Documentation           |  [http://rdoc.info/github/mfpiccolo/self_systeem/frames][documentation] |\r\n| Issues                  |  [https://github.com/mfpiccolo/self_systeem/issues][issues] |\r\n\r\n## Description\r\n\r\n###Definition: self-systeem\r\nnoun\r\n\r\n1.  a realistic respect for or favorable impression of one's system\r\n2.  confidence in one's system worth or abilities\r\n3.  system-respect\r\n\r\nDo you have low self-systeem? Don't worry.  This gem is here to help.\r\n\r\nself_systeem allows you to record a users interaction with your rails app in a\r\ndevelopment enviornment and automatically creates system tests based on the\r\nrecordings.\r\n\r\nIt is simple.  Walk through the app from sart to finish.  Cover as much as you\r\nfeel comfortable.  That't it.  You just built a system test.  Congrats!\r\n\r\n## Features\r\n\r\nAfter setting up self_systeem (see configuration below) use the generator to create\r\nthe system test directory.\r\n\r\n`rails g self_systeem:test`\r\n\r\nThen run `SELF_SYSTEEM=true rails s`\r\n\r\nNow open a new browser preferably in incognito mode so you have fresh session.\r\nWalk through your app like a normal user would.  While you are doing this positive\r\naffirmations are being built in \"test/system/support/systeem_booster.yml\"\r\n\r\nNow just run the test file with `ruby -Itest test/system/systeem_test.rb` and watch\r\nyou tests turn green.  What does this really get you?  Well for one the session and\r\ndatabase is persisted while runnin all these tests.  That means that when you are running\r\nyour tests it is essentially a recreation of all of those users actions in sequence.\r\n\r\nPossitive affirmations:\r\n*  \"Today, my system choose to see love instead of fear\"\r\n*  \"My system possess the qualities needed to be extremely successful\"\r\n\r\nFeeling better?\r\n\r\nWell if those didn't work you can always check out the affirmations that you have built in systeem_booster.yml.  That should do the trick.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem \"self_systeem\"\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install self_systeem\r\n\r\n## Configuration\r\n\r\nTo use the generator run:\r\n\r\n    $ rails g self_systeem:test\r\n\r\nThis will set up a system folder under test with a test file and some support files.\r\n\r\nAdd this line to development.rb\r\n\r\n`config.middleware.use \"SelfSysteem::AffirmationBuilder\" if ENV[\"SELF_SYSTEEM\"].present?`\r\n\r\nTemporarily change you database.yml so the development database uses the test database.\r\nThis step is only while you build systeem_booster.yml file.  Chage it back when you are done.\r\n\r\ni.e.\r\n```ruby\r\n  development: &dev\r\n  adapter: postgresql\r\n  encoding: unicode\r\n  database: app_test # Change this back after creating systeem_booster.yml\r\n  pool: 5\r\n  username: <%= ENV[\"USER\"] %>\r\n  password:\r\n  allow_concurrency: true\r\n  min_messages: warning\r\n```\r\n\r\n## The Future\r\n\r\n1.  Refactoring would be nice.  2.1 from codeclimate is no good.\r\n2.  Boost test coverage.\r\n3.  Ensure that this works with most setups. Only works with minitest, would be nice to have rspec and several rails versions working.\r\n4.  Make the test database switch automatic when running rails with \"SELF_SYSTEEM\" env.\r\n5.  Allow more configurable options possibly to allow devs to do more targeted testing post systeem_booster.yml build.\r\n6.  Option to do response body matching of some sort.\r\n7.  Open to suggestions.  Lets start boosting that self-systeem!\r\n\r\n## Donating\r\nSupport this project and [others by mfpiccolo][gittip-mfpiccolo] via [gittip][gittip-mfpiccolo].\r\n\r\n[gittip-mfpiccolo]: https://www.gittip.com/mfpiccolo/\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2013 Mike Piccolo\r\n\r\nSee [LICENSE.txt](LICENSE.txt) for details.\r\n\r\n## Contributing\r\n\r\n1. Fork it ( http://github.com/<my-github-username>/self_systeem/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/3d22924e211bdc891d3ad124e085a595 \"githalytics.com\")](http://githalytics.com/mfpiccolo/self_systeem)\r\n\r\n[license]: https://github.com/mfpiccolo/self_systeem/MIT-LICENSE\r\n[homepage]: http://mfpiccolo.github.io/self_systeem\r\n[documentation]: http://rdoc.info/github/mfpiccolo/self_systeem/frames\r\n[issues]: https://github.com/mfpiccolo/self_systeem/issues\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}